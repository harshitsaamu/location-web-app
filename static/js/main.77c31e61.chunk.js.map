{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","projectsData","projects","undefined","getLocation","_callee","e","apiCall","data","regenerator_default","a","wrap","_context","prev","next","preventDefault","document","getElementById","fetch","sent","json","console","log","stop","this","react_default","createElement","style","display","justifyContent","alignItems","height","js_default","hideTopBar","allowTabs","startState","color","backgroundColor","barColor","fontWeight","fontSize","commands","intro","github","window","open","linkedin","resume","descriptions","msg","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAuDeA,6MAlDXC,aAAe,CACXC,cAAUC,KAGdC,kDAAc,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVR,EAAES,iBACYC,SAASC,eAAe,WAF5BL,EAAAE,KAAA,EAGYI,MAAK,mDAHjB,cAGJX,EAHIK,EAAAO,KAAAP,EAAAE,KAAA,EAISP,EAAQa,OAJjB,OAIJZ,EAJII,EAAAO,KAKVE,QAAQC,IAAId,GALF,wBAAAI,EAAAW,SAAAlB,EAAAmB,uIASV,OACIC,EAAAf,EAAAgB,cAAA,OACIC,MAAO,CACHC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UAGZN,EAAAf,EAAAgB,cAACM,EAAAtB,EAAD,CACIuB,YAAY,EACZC,WAAW,EACXC,WAAW,YACXC,MAAM,QACNC,gBAAgB,QAChBC,SAAS,QACTX,MAAO,CAAEY,WAAY,OAAQC,SAAU,OACvCC,SAAU,CACNC,MAAS,iBAAM,mCACfC,OAAS,kBAAIC,OAAOC,KAAK,yCACzBC,SAAW,kBAAIF,OAAOC,KAAK,4CAC3BE,OAAS,kBAAIH,OAAOC,KAAK,4CACzB3C,SAAYsB,KAAKpB,eAErB4C,aAAc,CACVN,MAAS,kBACTC,OAAS,oBACTI,OAAS,qBACTD,SAAW,8BAEfG,IAAI,uDA5CNC,aCQEC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAf,EAAAgB,cAAC+B,EAAD,MAASzC,SAASC,eAAe,SDuH3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77c31e61.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Terminal from 'terminal-in-react';\n\nclass App extends Component {\n    projectsData = {\n        projects: undefined\n    };\n\n    getLocation = async (e) => {\n        e.preventDefault();\n        let pinCode = document.getElementById(\"pincode\");\n        const apiCall = await fetch(`https://api.github.com/users/harshitsaamu/repos`);\n        const data = await apiCall.json();\n        console.log(data);\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    height: \"100vh\"\n                }}\n            >\n                <Terminal\n                    hideTopBar={true}\n                    allowTabs={false}\n                    startState='maximised'\n                    color='green'\n                    backgroundColor='black'\n                    barColor='black'\n                    style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\n                    commands={{\n                        'intro': () => 'echo Harshit Gupta\\n B.tech CSE',\n                        'github':()=>window.open('https://www.github.com/harshitsaamu/'),\n                        'linkedin':()=>window.open('https://www.linkedin.com/in/harshithgc/'),\n                        'resume':()=>window.open('https://www.linkedin.com/in/harshithgc/'),\n                        'projects': this.getLocation()\n                    }}\n                    descriptions={{\n                        'intro': 'my introduction',\n                        'github':'my github account',\n                        'resume':'download my resume',\n                        'linkedin':'lets\\'s talk professionally'\n                    }}\n                    msg='Hey human Harshit here, how can I help you'\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}